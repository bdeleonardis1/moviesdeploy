{"version":3,"sources":["App.js","index.js"],"names":["Table","columns","data","useTable","initialState","sortBy","id","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","pageIndex","state","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","onClick","console","log","clicker","getRowProps","cells","cell","getCellProps","disabled","length","type","defaultValue","onChange","e","target","value","Number","App","useState","setColumns","setData","setExtraData","useEffect","fetch","then","response","json","jsonResponse","extraData","ReactDOM","StrictMode","document","getElementById"],"mappings":"oNA8BA,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAe5BC,mBACF,CACEF,UACAC,OACAE,aAAc,CAAEC,OAAQ,CAAC,CAAEC,GAAI,QAASC,MAAM,MAEhDC,YACAC,iBApBAC,EAF8B,EAE9BA,cACAC,EAH8B,EAG9BA,kBACAC,EAJ8B,EAI9BA,aACAC,EAL8B,EAK9BA,KACAC,EAN8B,EAM9BA,WAEAC,EAR8B,EAQ9BA,gBACAC,EAT8B,EAS9BA,YACAC,EAV8B,EAU9BA,YACAC,EAX8B,EAW9BA,SACAC,EAZ8B,EAY9BA,SACAC,EAb8B,EAa9BA,aACSC,EAdqB,EAc9BC,MAASD,UAWX,OACE,yBAAKE,UAAU,UACb,yCAAOA,UAAU,cAAiBb,KAChC,+BACGE,EAAaY,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,uBAAQA,EAAOC,eAAeD,EAAOE,wBAClCF,EAAOG,OAAO,UACf,8BACGH,EAAOI,SACJJ,EAAOK,aACL,gBACA,gBACF,aAOhB,0BAAWtB,IACRE,EAAKW,KAAI,SAAAU,GAER,OADApB,EAAWoB,GAET,sCAAIC,QAAS,kBA0C3B,SAAiBD,GACfE,QAAQC,IAAI,aAAcH,EAAI5B,IA3CCgC,CAAQJ,KAAUA,EAAIK,eACtCL,EAAIM,MAAMhB,KAAI,SAAAiB,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKV,OAAO,kBASxD,yBAAKR,UAAU,cACb,4BAAQY,QAAS,kBAAMf,KAAgBuB,UAAW5B,GAC/C,KACO,IACV,4BAAQoB,QAAS,kBAAMhB,KAAYwB,UAAW3B,GAC3C,KACO,IACV,qCACO,IACL,gCACGK,EAAY,EADf,OACsBJ,EAAY2B,QACxB,KAEZ,8CACgB,IACd,2BACEC,KAAK,SACLC,aAAczB,EAAY,EAC1BE,UAAU,OACVwB,SAAU,SAAAC,GACR,IAAMnC,EAAOmC,EAAEC,OAAOC,MAAQC,OAAOH,EAAEC,OAAOC,OAAS,EAAI,EAC3DhC,EAASL,OAGP,MAUDuC,MAzHf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNpD,EADM,KACGqD,EADH,OAEWD,mBAAS,IAFpB,mBAENnD,EAFM,KAEAqD,EAFA,OAGqBF,mBAAS,IAH9B,mBAGKG,GAHL,WAiBb,OAZAC,qBAAU,WACRC,MAAM,YACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJR,EAAWQ,EAAa7D,SACxBsD,EAAQO,EAAa5D,MACrBsD,EAAaM,EAAaC,gBAE7B,IAGD,yBAAKxC,UAAU,OACb,sCACA,kBAACvB,EAAD,CAAOC,QAASA,EAASC,KAAMA,MCpBrC8D,IAASjC,OACP,kBAAC,IAAMkC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.46a2e423.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport { useTable, useSortBy, usePagination } from \"react-table\";\n\nfunction App() {\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [extraData, setExtraData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/getrows\")\n      .then(response => {\n        return response.json();\n      })\n      .then(jsonResponse => {\n        setColumns(jsonResponse.columns);\n        setData(jsonResponse.data);\n        setExtraData(jsonResponse.extraData);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h2>Movies</h2>\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\n\nfunction Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex }\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { sortBy: [{ id: \"title\", desc: false }] }\n    },\n    useSortBy,\n    usePagination\n  );\n\n  return (\n    <div className=\"movies\">\n      <table className=\"main-table\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" ðŸ”½\"\n                        : \" ðŸ”¼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(row => {\n            prepareRow(row);\n            return (\n              <tr onClick={() => clicker(row)} {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <div className=\"pagination\">\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {\">\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            className=\"goto\"\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n          />\n        </span>{\" \"}\n      </div>\n    </div>\n  );\n}\n\nfunction clicker(row) {\n  console.log(\"In clicker\", row.id);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}